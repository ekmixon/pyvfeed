#!/usr/bin/env python3
# API Python wrapper for The Vulnerability & Threat Intelligence Feed Service
# Copyright (C) 2013 - 2020 vFeed, Inc. - https://vfeed.io

from common import utils as utility
from lib.Database import Database


class Exploitation(object):
    def __init__(self, id):
        """ init """

        self.id = id
        (self.cur, self.query) = Database(self.id).db_init()

    def get_exploits(self):
        """ callable method - return exploits and PoC signatures"""

        # init local list
        response = []

        self.cur.execute("SELECT source FROM exploits_db GROUP BY source")

        for source in self.cur.fetchall():
            source = source[0].strip()
            if data := self.enum_exploits(source):
                # format the response
                tag = {source: data}
                response.append(tag)

        # set the tag
        response = {"exploitation": response}

        return utility.serialize_data(response)

    def enum_exploits(self, source):
        """ list information from different sources related to exploits and PoCs """

        # init local list
        response = []

        self.cur.execute(
            "SELECT DISTINCT id,title,file,link FROM exploits_db WHERE source = '{0}' and cve_id=? order by id".format(source),
            self.query)

        for data in self.cur.fetchall():
            id = data[0]
            title = data[1]
            file = data[2]
            url = data[3]

            # format the response
            exploits = {"id": id, "parameters": {"title": title, "file": file, "url": url}}
            response.append(exploits)

        return response
